
	.title	Device register test

	; This program tests the UniBone "test controller"
	; Its just a memory test on 760000 to 760176
	;
	; Contact: Joerg Hoppe / j_hoppe@t-online.de / www.retromcp.com

dladr	=	177560	; DL11 console base address
psw	=	177776	; processor status

; membeg = 150000
; memend = 150177
membeg = 160000
memend = 160177

monitr = 165020


	.asect

	.=1000

stack	=	. - 2		; stack growns down from start

start:
	mov	#stack,sp	; init stack

	clr	   @#psw	; clear priority, allow all interupts

	; 1. print "Hello" msg
	mov	#shello,r1
	call	@#puts


loop:
	; 2. test memory
	call	@#memfil
	call	@#memchk
	bcs	error		  ; mismatch, print address and halt

	; mov	  #'.,r0	   ; print a "." on each pass
	; call	  @#putc	  ; no: echo char in r0 and loop

	; echo chars until ^C hit
	mov	#dladr,r4	; set base addr
	tstb	(r4)		; RCVR DONE?
	bpl	loop		; no, test again

	call	@#getc		; read char, return in r0
	bic	#177600,r0	; make 7bit: clear bits <15:7>
	cmpb	r0,#3		; break by ^C ?
	beq	9$		; yes: leave loop

	call	@#putc		; no: echo char in r0 and loop
	br	loop

9$:
	; 3. print "Bye bye" msg and jump to monitor
	mov	#sbye,r1
	call	@#puts
	jmp	@#monitr


error: ; --- print "error at <r1>" and stop
	mov	r1,-(sp)
	mov	#serr0,r1
	call	@#puts
	mov	(sp)+,r0       ; restore error addr
	call	@#putnum
	mov	#serr1,r1
	call	@#puts
	halt
	; 4. loop on CONT
	br	start


	; ----------------------
	; memfill
	; write pattern into memory. r1 =seed
	; each cell is filled with <addr>+<seed>
memfil:
	mov	#membeg,r2
1$:	cmp	r2,#memend
	bhi	9$		; memend passed
	mov	r2,r0		; r0 = testval[addr]
	add	r1,r0
	mov	r0,(r2)+
	br	1$
9$:
	return

	; ----------------------
	; memcheck
	; verify pattern in memory. r1 =seed
	; result: Carry set =error, r2 = address
memchk:
	mov	#membeg,r2
1$:	cmp	r2,#memend
	bhi	9$		; memend passed: OK
	mov	r2,r0		; r0 = testval[addr]
	add	r1,r0
	cmp	r0,(r2)+
	beq	1$		; OK, next word
	sec	; Error: set carry, r2 = address
	return

9$:	clc	; clear carry: success
	return




	; ----------------------
	; puts - print a string
	; r1 = pointer, r0,r1 changed
puts:
	movb	(r1)+,r0	; load xmt char
	beq	1$		; string ends with 0
	call	@#putc
	br	puts		; transmit nxt char of string
1$:	return


	; ----------------------
	; putnum - print the octal number in r0
numbf0:  .blkw	 10		 ; space to mount number string
numbf1	=.
putnum:
	mov	r0,r2		; r2 = shifter
	mov	#numbf1,r1	; r1 = buffer pointer, backwards
	movb	#0,-(r1)	; set terminating 0
	; repeat 6 times
	mov	#6,r3
1$:
	mov	r2,r0
	; extract lower 3 bits = octal digit
	bic	#177770,r0 ; r0 &= 0x07
	add	#60,r0	; r0 += '0'
	movb	r0,-(r1) ; write in buffer
	clc
	ror	r2	; shift to next digit
	ror	r2
	ror	r2
	sob	r3,1$	; loop for all 6 digits

	call	@#puts
	return


	; DEC DL11 console I/O
	; ----------------------
	; putc - output a single char
	; r0 = char, r4 changed
putc:
	mov	#dladr,r4	; set base addr
	movb	r0,6(r4)	; char into transmit buffer
1$:	tstb	4(r4)		; XMT RDY?
	bpl	1$		; no, loop
	return

	; ----------------------
	; getc - input a single char
	; result in r0, r4 changed
	;
getc:
	mov	#dladr,r4	; set base addr
1$:	tstb	(r4)		; RCVR DONE?
	bpl	1$		; no, loop
	mov	2(r4),r0	; return data
	return


	; ---- Text strings  ---------

shello:
	.byte	15,12		; CR, LF,
	.ascii	/*** Test of UniBone test controller ***/
	.byte	15,12		; CR, LF,
	.ascii	/The foreground thread echoes typed chars, ^C HALTs./
	.byte	15,12	; CR, LF,
	.byte	0		; NUL=end marker


serr0:
	.byte	15,12		; CR, LF,
	.ascii	/Memory error at /
	.byte	0		; NUL=end marker

serr1:
	.ascii	/, haltig./
	  .byte   15,12   ; CR, LF,
	.byte	0		; NUL=end marker

sbye:
	.byte	15,12
	.ascii	/Good Bye!/
	.byte	15,12,0 	; CR, LF, NUL=end marker


	.end
