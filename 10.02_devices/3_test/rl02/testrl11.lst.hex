       1                                	.title rl11 test program
       2                                
       3                                	; Stimulate an emulated RL11 controller.
       4                                	; Selected drive is always #0
       5                                
       6  F900h                         rlbase	= 174400		; RL11 base addrs
       7  0000h                         cs	= 0			; RL11 register offsets
       8  0002h                         ba	= 2
       9  0004h                         da	= 4
      10  0006h                         mp	= 6
      11                                
      12                                
      13  FF70h                         dladr	=	177560	; DL11 console base address
      14  FFFEh                         psw	=	177776	; processor status
      15                                
      16  EA10h                         monitr = 165020 		; entry into M9312 monitor
      17                                
      18                                	;; RL11 commands
      19  0004h                         cmstat	= 2*2			; get status
      20  0006h                         cmseek	= 3*2			; seek
      21  0008h                         cmrdhd	= 4*2			; read header
      22  000Ah                         cmwrda	= 5*2			; write data
      23  000Ch                         cmrdda	= 6*2			; read data
      24                                
      25                                
      26                                	.asect
      27                                
      28  0070h                         	.=160 ; addr for vector 160
      29                                rlvect:
      30  0070h  02C2h                  	.word	isr		; new PC of ISR
      31  0072h  00E0h                  	.word	340		; new PSW: priority is max = 7
      32                                
      33                                
      34                                
      35  0200h                         	.=1000
      36                                
      37  01FEh                         stack	=	. - 2		; stack grows down from start
      38                                
      39                                	; --- main()
      40                                start:
      41  0200h  15C6h   01FEh          	mov	#stack,sp	; init stack
      42  0204h  15C4h   F900h          	mov	#rlbase,r4	; r4 points to RL11 register space
      43                                
      44  0208h  15C1h   032Bh          	mov	#shello,r1
      45  020Ch  09DFh   02D6h          	call	@#puts
      46                                
      47  0210h  09DFh   0218h          	 call  @#test1
      48                                	; call	  @#test2
      49                                
      50  0214h  005Fh   EA10h          	jmp	@#monitr
      51                                
      52                                
      53                                
      54                                	; --- TEST1 do a "seek", like the PDP11GIUI driver does
      55                                test1:
      56                                	; wait until controller ready
      57  0218h  8BCCh                  0$:	tstb	(r4)		; wait for "controller ready" (csr.7)
      58  021Ah  80FEh                  	bpl	0$
      59                                
      60                                	; clear and get drive status
      61  021Ch  15F4h   000Bh   0004h  	mov	#013,da(r4)	; subcmd reset+getstatus
      62  0222h  15C0h   0004h          	mov	#cmstat,r0
      63                                	; test: command acceptet dirclty aufter INIT singal
      64                                	; -> multiple event forwarding in ubibusadapter_c::worker()
      65  0226h  0005h                  	reset
      66                                
      67  0228h  100Ch                  	mov	r0,(r4) 	; GO
      68  022Ah  8BCCh                  1$:	tstb	(r4)		; wait for "controller ready" (csr.7)
      69  022Ch  80FEh                  	bpl	1$
      70                                
      71                                	; call	  @#wait65	  ;
      72                                
      73                                	; AGAIN: clear and get drive status
      74  022Eh  15F4h   000Bh   0004h  	mov	#013,da(r4)	; subcmd reset+getstatus
      75  0234h  15C0h   0004h          	mov	#cmstat,r0
      76  0238h  100Ch                  	mov	r0,(r4) 	; GO
      77  023Ah  8BCCh                  2$:	tstb	(r4)		; wait for "controller ready" (csr.7)
      78  023Ch  80FEh                  	bpl	2$
      79                                
      80                                	; call	  @#wait65	  ;
      81                                
      82                                	; seek sector: read header
      83  023Eh  15C0h   0008h          	mov	#cmrdhd,r0	; read header cmd
      84  0242h  100Ch                  	mov	r0,(r4) 	; execute
      85  0244h  8BCCh                  3$:	tstb	(r4)		; wait for "controller ready" (csr.7)
      86  0246h  80FEh                  	bpl	3$
      87  0248h  1D03h   0006h          	mov	mp(r4),r3	; retrieve cyl/head/sector
      88                                
      89                                	; call	  @#wait65	  ;
      90                                
      91                                
      92                                	; seek ... distance = 0
      93                                	; assume a 0 track seek
      94  024Ch  15F4h   0000h   0004h  	mov	#0,da(r4)	; clear disk address
      95  0252h  15C0h   0006h          	mov	#cmseek,r0
      96  0256h  100Ch                  	mov	r0,(r4) 	; execute 0 track seek
      97  0258h  8BCCh                  4$:	tstb	(r4)		; wait for "controller ready" (csr.7)
      98  025Ah  80FEh                  	bpl	4$
      99                                
     100  025Ch  0087h                  	return
     101                                
     102                                
     103                                	; --- TEST2 - read sector 0 into mem at 10000 and do interrupt
     104                                test2:
     105                                
     106  025Eh  0A1Fh   FFFEh          	clr	@#psw		; enable all interrupt levels
     107                                	; wait until controller ready
     108  0262h  8BCCh                  0$:	tstb	(r4)		; wait for "controller ready" (csr.7)
     109  0264h  80FEh                  	bpl	0$
     110                                
     111                                
     112                                ;	; clear and get drive status
     113                                ;	mov	#013,da(r4)	; subcmd reset+getstatus
     114                                ;	mov	#cmstat,r0
     115                                ;	mov	r0,(r4) 	; GO
     116                                ;1$:	tstb	(r4)		; wait for "controller ready" (csr.7)
     117                                ;	bpl	1$
     118                                
     119                                
     120                                
     121                                	; seek max inward , to cyl0, hd 0
     122  0266h  15F4h   FF81h   0004h  	mov	#177600+1,da(r4)
     123  026Ch  15C0h   0006h          	mov	#cmseek,r0
     124  0270h  100Ch                  	mov	r0,(r4) 	; execute 0 track seek
     125  0272h  8BCCh                  2$:	tstb	(r4)		; wait for "controller ready" (csr.7)
     126  0274h  80FEh                  	bpl	2$
     127                                	; test for "drive ready"
     128  0276h  35CCh   0001h          	bit	#1,(r4)
     129  027Ah  03FBh                  	beq	2$
     130                                
     131  027Ch  15F4h   8000h   0002h  	mov	#buffer,ba(r4) ; setup memory address
     132  0282h  15F4h   0000h   0004h  	mov   #0,da(r4)       ; disk address: cyl=0, hd=0, sec=0
     133  0288h  15F4h   FF80h   0006h  	mov	#177600,mp(r4)	; load wordcount -128 = 0400
     134                                
     135  028Eh  0A1Fh   02C0h          	clr	@#isrcnt
     136  0292h  15F4h   004Ch   0000h  	mov	#100+cmrdda,cs(r4)     ; IE=1, function=6 read data
     137                                ;	 mov	 #cmrdda,cs(r4)     ; IE=0, function=6 read data
     138                                	; wait for ISR
     139                                3$:
     140  0298h  0BDFh   02C0h          	tst	@#isrcnt       ; wait for ISR
     141  029Ch  03FDh                  	beq	3$
     142                                ;	 tstb	 cs(r4) 	; wait for CRDY
     143                                ;	 bpl	 3$
     144                                
     145  029Eh  15C1h   033Eh          	mov	#sba,r1 	; "BA="
     146  02A2h  09DFh   02D6h          	call	@#puts
     147  02A6h  1D00h   0002h          	mov	ba(r4),r0
     148  02AAh  09DFh   02F2h          	call	@#putnum	; content of BA register
     149  02AEh  15C1h   0328h          	mov	#scrlf,r1	; end of line
     150  02B2h  09DFh   02D6h          	call	@#puts
     151                                
     152                                
     153  02B6h  15C1h   0342h          	mov	#sready,r1	 ; print "READY"
     154  02BAh  09DFh   02D6h          	call	@#puts
     155  02BEh  0087h                  	return
     156                                
     157                                
     158                                
     159                                ;	--------------
     160                                ;	--- isr - called on interupt
     161                                ;	print incremented BA ... is DMA really ready?
     162  02C0h  0000h                  isrcnt: .word			; flag: ISR hit
     163                                isr:
     164  02C2h  0A9Fh   02C0h          	inc	@#isrcnt	; signal "done"
     165  02C6h  0002h                  	rti
     166                                
     167                                
     168                                
     169                                
     170                                	; -- wait 65ms, uses r0
     171                                wait65:
     172  02C8h  0A00h                  	clr	r0
     173                                0$:
     174  02CAh  7E01h                  	sob	r0,0$	: subtract one, loop until zero
     175  02CCh  0087h                  	return
     176                                
     177                                
     178                                	; --- check for error
     179                                chkerr:
     180                                	; verify controller ready
     181  02CEh  8BCCh                  0$:	tstb	(r4)	    ; wait for "controller ready" (csr.7)
     182  02D0h  80FEh                  	bpl	0$	    ;
     183                                
     184  02D2h  1300h                  	mov	(r4),r0 	; return status CSR
     185                                ;	 bic	 #1777,r0	 ; ignore bits 9:0, error flags are in 15:10
     186                                ;	 bne	 1$
     187                                ;	 clc
     188  02D4h  0087h                  	return			; CSR = R1 = 0: no error
     189                                
     190                                
     191                                	; ----------------------
     192                                	; puts - print a string
     193                                	; r1 = pointer, r0,r1 changed
     194                                puts:
     195  02D6h  9440h                  	movb	(r1)+,r0	; load xmt char
     196  02D8h  0303h                  	beq	1$		; string ends with 0
     197  02DAh  09DFh   031Ch          	call	@#putc
     198  02DEh  01FBh                  	br	puts		; transmit nxt char of string
     199  02E0h  0087h                  1$:	return
     200                                
     201                                
     202                                	; ----------------------
     203                                	; putnum - print the octal number in r0
     204  02E2h                         numbf0:  .blkw	 10		 ; space to mount number string
     205  02F2h                         numbf1	=.
     206                                putnum:
     207  02F2h  1002h                  	mov	r0,r2		; r2 = shifter
     208  02F4h  15C1h   02F2h          	mov	#numbf1,r1	; r1 = buffer pointer, backwards
     209  02F8h  95E1h   0000h          	movb	#0,-(r1)	; set terminating 0
     210                                	; repeat 6 times
     211  02FCh  15C3h   0006h          	mov	#6,r3
     212                                1$:
     213  0300h  1080h                  	mov	r2,r0
     214                                	; extract lower 3 bits = octal digit
     215  0302h  45C0h   FFF8h          	bic	#177770,r0 ; r0 &= 0x07
     216  0306h  65C0h   0030h          	add	#60,r0	; r0 += '0'
     217  030Ah  9021h                  	movb	r0,-(r1) ; write in buffer
     218  030Ch  00A1h                  	clc
     219  030Eh  0C02h                  	ror	r2	; shift to next digit
     220  0310h  0C02h                  	ror	r2
     221  0312h  0C02h                  	ror	r2
     222  0314h  7ECBh                  	sob	r3,1$	; loop for all 6 digits
     223                                
     224  0316h  09DFh   02D6h          	call	@#puts
     225  031Ah  0087h                  	return
     226                                
     227                                
     228                                	; DEC DL11 console I/O
     229                                	; ----------------------
     230                                	; putc - output a single char
     231                                	; r0 = char
     232                                putc:
     233  031Ch  901Fh   FF76h          	movb	r0,@#dladr+6  ; char into transmit buffer
     234  0320h  8BDFh   FF74h          1$:	tstb	@#dladr+4      ; XMT RDY?
     235  0324h  80FDh                  	bpl	1$		; no, loop
     236  0326h  0087h                  	return
     237                                
     238                                
     239                                	; --- string constants
     240  0328h    0Dh     0Ah          scrlf:	.byte	15,12		; CR, LF,
     241  032Ah    00h                  	.byte	0
     242                                
     243                                
     244                                shello:
     245  032Bh    0Dh     0Ah          	.byte	15,12		; CR, LF,
     246  032Dh    53h     74h     61h  	.ascii	/Starting test!/
          0330h    72h     74h     69h  
          0333h    6Eh     67h     20h  
          0336h    74h     65h     73h  
          0339h    74h     21h          
     247  033Bh    0Dh     0Ah          	.byte	15,12		; CR, LF,
     248  033Dh    00h                  	.byte	0
     249                                
     250  033Eh    42h     41h     3Dh  sba:	.ascii	/BA=/
     251  0341h    00h                  	.byte	0		; NUL=end marker
     252                                
     253  0342h    53h     65h     63h  sready: .ascii	/Sector 0 transfered to 100000, ISR hit./
          0345h    74h     6Fh     72h  
          0348h    20h     30h     20h  
          034Bh    74h     72h     61h  
          034Eh    6Eh     73h     66h  
          0351h    65h     72h     65h  
          0354h    64h     20h     74h  
          0357h    6Fh     20h     31h  
          035Ah    30h     30h     30h  
          035Dh    30h     30h     2Ch  
          0360h    20h     49h     53h  
          0363h    52h     20h     68h  
          0366h    69h     74h     2Eh  
     254  0369h    0Dh     0Ah          	.byte	15,12		; CR, LF,
     255  036Bh    00h                  	.byte	0
     256                                
     257                                	; ---- 32kb page
     258  8000h                         	. = 100000
     259                                buffer:
     260                                	.end ;
     261                                
     262                                	.end
     262                                
