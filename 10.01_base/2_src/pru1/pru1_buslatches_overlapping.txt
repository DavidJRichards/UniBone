Speed up busaltch access with overlapping access
to 3:8 mux
On read:
macro buslatches_get(cycles_since_regmux, reg_sel, reg_sel_next, result_var, reg_sel_current_var)

R1 - check if 74138 regmux is already set as expected  (vvariable "reg_sel_current")
if yes:
  R21  wait until required delay to last mux switch is reached
     Cycle time since last  access to regmux_sel in "cycles_since_regmux")
    (read_ 10 cycles, 6 alone for BBB signal processing)
if no:
 R31 - set mux
 R32 wait full delay (10 cycles)
R22- read in muxed data from lvt541
	result_var := R31
R4- set next mux expected value  "reg_sel_next"
R5 update reg_sel_current


On write: macro buslatches_set(cycles_since_regmux, reg_sel, reg_sel_next, val, reg_sel_current_variable)
W1 - setup data do PRU0 outputs
W2 - set regmux, update reg_sel_current
Dont check  if 74138 regmux is already set as exepected,
Setting of output data on PRU0 uses moretime than set up uf regmux and
progation of selct singals to 74371 latches (only 10ns!)



Code path:
- check needed, if reg_mux is as set by previous busaltch_get/set()
- checks static, may be elimianted by compiler.
- if reg_sel_next is a local var, it may be eliminated totally
- if reg_sel_next is a global var, expected "next" value in different state machnies
 may be read from logic analyzer trace of "typical" operation.
 - a local variable "cycles_since_last_regmux" may be used to
  count processing time. It is only set with const vlaues,
  so may be elimated by compiler and may be used in delay_cycles()


uint8_t	reg_sel_current ; // local var
 reg_sel_current = 0xff

a0_7 =  buslatches_get(0, 4, 5, reg_sel_current) ;
// => if (4 != 0xff) -> code R31,R32, wait 10 cycles


a8_15 =  buslatches_get(4, 5, 2, reg_sel_current) ;
if (5 != 5) => mux already correct,
	R21: delaycycles(10-4), // estimated 4 cycles processing time



