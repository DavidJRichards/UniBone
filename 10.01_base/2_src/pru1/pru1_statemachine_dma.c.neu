/*
 * Statemachine for execution of master DATO or DATI cycles.
 * All references "PDP11BUS handbook 1979"
 * Precondition: BBSY already asserted (arbitration got)
 *
 *  Master reponds to INIT bystopping transactions.
 * new state
 *
 * Start: setup dma mailbox setup with
 *	startaddr, wordcount, cycle, words[]
 *	Then sm_dma_init() ;
 *	sm_dma_state = DMA_STATE_RUNNING ;
 *	while(sm_dma_state != DMA_STATE_READY)
 *		sm_dma_service() ;
 *	state is 0 for OK, or 2 for timeout error.
 *	mailbox.dma.cur_addr is error location
 *
 *	Speed: (clpru 2.2, -O3:
 * 	Example: DATI, time SSYN- active -> (processing) -> MSYN inactive
 *	a) 2 states, buslatch_set/get function calls, TIMEOUT_SET/REACHED(75) -> 700ns
 *	b) 2 states, buslatch_set/get macro, TIMEOUT_SET/REACHED(75) -> 605ns
 *	c) 2 states, no TIMEOUT (75 already met) -> 430ns
 *	d) 1 marged state, no TIMEOUT  ca. 350ns
 */
#define _PRU1_STATEMACHINE_DMA_C_

#include <stdint.h>

#include "deviceregister.h"
#include "mailbox.h"
#include "pru_pru_mailbox.h"
#include "pru1_buslatches.h"
#include "pru1_utils.h"

#include "pru1_statemachine_dma.h"

/* sometimes short timeout of 75 and 150ns are required
 * 75ns between state changes is not necessary, code runs longer
 * 150ns between state changes is necessary
 * Overhead for extra state and TIEOUTSET/REACHED is 100ns
 */
//#define DELAY_75NS	do {} while(0)
// #define TIMEOUT_SET_75NS do {} while(0)
//#define TIMEOUT_REACHED_75NS	1
statemachine_dma_t sm_dma;

// forwards ;
static uint8_t sm_dma_state_0(void);
static uint8_t sm_dma_state_1(void);
static uint8_t sm_dma_state_2(void);
static uint8_t sm_dma_state_10(void);
static uint8_t sm_dma_state_20(void);
static uint8_t sm_dma_state_30(void);
static uint8_t sm_dma_state_99(void);
static uint8_t sm_dma_state_100(void);

// dma mailbox setup with
// startaddr, wordcount, cycle, words[]   ?
// "cycle" must be UNIBUS_CONTROL_DATI or UNIBUS_CONTROL_DATO
// "arb": 1, if NPR/NPG/SACK arbitration requeired
void sm_dma_start(uint8_t arb) {
	mailbox.dma.cur_addr = mailbox.dma.startaddr;
	sm_dma.dataptr = (uint16_t *) mailbox.dma.words; // point to start of data buffer
	sm_dma.cur_wordsleft = mailbox.dma.wordcount;
	if (sm_dma.cur_wordsleft == 0) {
		// nothing to do: idle
		mailbox.dma.cur_status = DMA_STATE_READY;
		sm_dma.state = &sm_dma_state_0;
	}
	if (arb)
		sm_dma.state = &sm_dma_state_1;
	else {
		// set BBSY, even we do no arbitration
		buslatches_set(1, BIT(6), BIT(6))
		;
		sm_dma.state = &sm_dma_state_10;
	}
	mailbox.dma.cur_status = DMA_STATE_RUNNING;
	// next call to sm_dma.state() starts state machine
}

// idle. call _start()
// execute in parallel with slave!
static uint8_t sm_dma_state_0() {
	uint8_t tmpval;
	// pass NPG to next device , if DMA engine idle
	tmpval = buslatches_get(0) & BIT(4);
	if (tmpval)
		buslatches_set(0, BIT(4), BIT(4))
		; // set  NPG_OUT
	else
		buslatches_set(0, BIT(4), 0)
		; // clear NPG_OUT
	return 1;
}

// wait for NPG  - Non processor Grant
// Assert NPR, wait for NPG, assert SACK, wait for NPG==0, set SACK=0 ,
// execute in parallel with slave!
static uint8_t sm_dma_state_1() {
	buslatches_set(1, BIT(4), BIT(4))
	; // NPR= latch1, bit 4
	sm_dma.state = &sm_dma_state_2; // wait for NPG
	return 0;
}

// wait for NPG or INIT
// execute in parallel with slave!
static uint8_t sm_dma_state_2() {
	if (buslatches_get(7) & BIT(3)) { // INIT stops transaction: latch[7], bit 3
		sm_dma.state = &sm_dma_state_100;  // cleanup
	} else if (buslatches_get(0) & BIT(4)) {
		// got NPG_IN
		buslatches_set(0, BIT(4), 0)
		; // clear NPG_OUT, block to next device
		// Set BBSY, set SACK, Clear NPR
		// NPR/G = Bit 4, ACK = bit 5, BBSY= bit 6
		buslatches_set(1, BIT(4)|BIT(5)|BIT(6), BIT(5)|BIT(6))
		;
		// master should clear NPG now.
		sm_dma.state = &sm_dma_state_10;  // start data transfer
	}
	return 0;
}

// place address and control bits onto bus, also data for DATO
// If slave address is internal (= implemented by UniBone),
// fast UNIBUS slave protocoll is generated on the bus.
static uint8_t sm_dma_state_10() {
	uint32_t tmpval;
	uint32_t addr = mailbox.dma.cur_addr; // non-volatile snapshot
	uint16_t data;
	uint8_t control = mailbox.dma.control;
	uint8_t internal_addr;

	if (sm_dma.cur_wordsleft == 1) {
		// deassert SACK, enable next arbitration cycle
		// parallel to last word data transfer
		buslatches_set(1, BIT(5), 0); // SACK = latch[1], bit 5
	}

	sm_dma.state_timeout = 0;

	// addr0..7 = latch[2]
	buslatches_set(2, 0xff, addr & 0xff);
	// addr8..15 = latch[3]
	buslatches_set(3, 0xff, (addr >> 8));
	// addr 16,17 = latch[4].0,1
	// C0 = latch[4], bit 2
	// C1 = latch[4], bit 3
	// MSYN = latch[4], bit 4
	// SSYN = latch[4], bit 5
	if (control == UNIBUS_CONTROL_DATO) {
		tmpval = (addr >> 16) & 3;
		tmpval |= BIT(3); // DATO: c1=1, c0=0
		// bit 2,4,5 == 0  -> C0,MSYN,SSYN not asserted
		buslatches_set(4, 0x3f, tmpval);
		// write data. SSYN may still be active???
//		data = mailbox.dma.words[sm_dma.cur_wordidx];
		data = *sm_dma.dataptr;
		buslatches_set(5, 0xff, data & 0xff); // DATA[0..7] = latch[5]
		buslatches_set(6, 0xff, data >> 8); // DATA[8..15] = latch[6]
		// wait 150ns, but guaranteed to wait 150ns after SSYN inactive
		// prev SSYN & DATA may be still on bus, disturbes DATA
		while (buslatches_get(4) & BIT(5))
			;	// wait for SSYN inactive
		__delay_cycles(NANOSECS(150) - 10);
		// assume 10 cycles for buslatches_get and address test
		// ADDR, CONTROL (and DATA) stable since 150ns, set MSYN

		// use 150ns delay to check for internal address
		internal_addr = DEVICEREGISTER_IS_INTERNAL(addr);
		// !!! optimizer may not move this around !!!
		// try "volatile internal_addr" (__asm(";---") may be rearanged)

		// MSYN = latch[4], bit 4
		buslatches_set(4, BIT(4), BIT(4)); // master assert MSYN

		if (internal_addr) {
			uint8_t b;
			// DATO to internal slave (fast test).

			// write data into slave
			switch (control) {
			case UNIBUS_CONTROL_DATO:
				deviceregister_write_w(addr, data);
				break;
			case UNIBUS_CONTROL_DATOB:
				// A00=1: upper byte, A00=0: lower byte
				b = (addr & 1) ? (data >> 8) : (data & 0xff);
				deviceregister_write_b(addr, b); // always sucessful, addr already tested
				break;
			}
			buslatches_set(4, BIT(5), BIT(5)); // slave assert SSYN
			buslatches_set(4, BIT(4), 0); // master deassert MSYN
			buslatches_set(5, 0xff, 0); // master removes data
			buslatches_set(6, 0xff, 0);
			buslatches_set(4, BIT(5), 0); // slave deassert SSYN
			sm_dma.state = &sm_dma_state_99; // next word
		} else {
			// DATO to external slave
			// wait for a slave SSYN
			TIMEOUT_SET(NANOSECS(1000*UNIBUS_TIMEOUT_PERIOD_US));
			sm_dma.state = &sm_dma_state_30; // wait SSYN DATAO
		}

	} else {
		// DATI
		tmpval = (addr >> 16) & 3;
		// bit 2,3,4,5 == 0  -> C0,C1,MSYN,SSYN not asserted
		buslatches_set(4, 0x3f, tmpval);

		// wait 150ns after MSYN, no distance to SSYN required
		__delay_cycles(NANOSECS(150) - 10);
		// assume 10 cycles for buslatches_get and address test
		// ADDR, CONTROL (and DATA) stable since 150ns, set MSYN next

		// use 150ns delay to check for internal address
		internal_addr = DEVICEREGISTER_IS_INTERNAL(addr);
		// !!! optimizer may not move this around!!!

		// MSYN = latch[4], bit 4
		buslatches_set(4, BIT(4), BIT(4)); // master assert MSYN

		if (internal_addr) {
			deviceregister_read(addr, &data);
			// DATI to internal slave: put MSYN/SSYN/DATA protocol onto bus,
			// slave puts data onto bus
			// DATA[0..7] = latch[5]
			buslatches_set(5, 0xff, data & 0xff);
			// DATA[8..15] = latch[6]
			buslatches_set(6, 0xff, data >> 8);
			// theoretically another bus member could set bits in bus addr & data ...
			// if yes, we would have to read back the bus lines
			*sm_dma.dataptr = data;
//			mailbox.dma.words[sm_dma.cur_wordidx] = data;

			buslatches_set(4, BIT(5), BIT(5)); // slave assert SSYN
			buslatches_set(4, BIT(4), 0); // master deassert MSYN
			buslatches_set(5, 0xff, 0); // slave removes data
			buslatches_set(6, 0xff, 0);
			buslatches_set(4, BIT(5), 0); // slave deassert SSYN
			sm_dma.state = &sm_dma_state_99; // next word
		} else {
			// DATI to external slave
			// wait for a slave SSYN
			TIMEOUT_SET(NANOSECS(1000*UNIBUS_TIMEOUT_PERIOD_US));
			sm_dma.state = &sm_dma_state_20; // wait SSYN DATI
		}
	}

	return 0; // still running
}

// DATI to external slave: MSYN set, wait for SSYN or timeout
static uint8_t sm_dma_state_20() {
	uint16_t tmpval;
	sm_dma.state_timeout = TIMEOUT_REACHED;
	// SSYN = latch[4], bit 5
	if (!sm_dma.state_timeout && !(buslatches_get(4) & BIT(5)))
		return 0; // no SSYN yet: wait
	// SSYN set by slave (or timeout). read data
	__delay_cycles(NANOSECS(75) - 6); // assume 2*3 cycles for buslatches_get

	// DATA[0..7] = latch[5]
	tmpval = buslatches_get(5);
	// DATA[8..15] = latch[6]
	tmpval |= (buslatches_get(6) << 8);
	// save in buffer
	*sm_dma.dataptr = tmpval;
	// mailbox.dma.words[sm_dma.cur_wordidx] = tmpval;
	// negate MSYN
	buslatches_set(4, BIT(4), 0);
	// DATI: remove address,control, MSYN,SSYN from bus, 75ns after MSYN inactive
	__delay_cycles(NANOSECS(75) - 8); // assume 8 cycles for state change
	sm_dma.state = &sm_dma_state_99;
	return 0; // still running
}

// DATO to external slave: wait for SSYN or timeout
static uint8_t sm_dma_state_30() {
	sm_dma.state_timeout = TIMEOUT_REACHED; // SSYN timeout?
	// SSYN = latch[4], bit 5
	if (!sm_dma.state_timeout && !(buslatches_get(4) & BIT(5)))
		return 0; // no SSYN yet: wait

	// SSYN set by slave (or timeout): negate MSYN, remove DATA from bus
	buslatches_set(4, BIT(4), 0); // deassert MSYN
	buslatches_set(5, 0xff, 0);
	buslatches_set(6, 0xff, 0);
	// DATO: remove address,control, MSYN,SSYN from bus, 75ns after MSYN inactive
	__delay_cycles(NANOSECS(75) - 8); // assume 8 cycles for state change
	sm_dma.state = &sm_dma_state_99;
	return 0; // still running
}

// word is transfered, or timeout.
static uint8_t sm_dma_state_99() {
	uint8_t final_dma_state;
	// from state_12, state_21

	// 2 reasons to terminate transfer
	// - BUS timeout at curent address
	// - last word transferred
	if (sm_dma.state_timeout) {
		final_dma_state = DMA_STATE_TIMEOUTSTOP;
	} else {
		sm_dma.dataptr++;  // point to next word in buffer
		sm_dma.cur_wordsleft--;
		if (sm_dma.cur_wordsleft == 0) {
			final_dma_state = DMA_STATE_READY; // last word: stop
			sm_dma.state = &sm_dma_state_0; // idle now
		} else if (buslatches_get(7) & BIT(3)) { // INIT stops transaction: latch[7], bit 3
			final_dma_state = DMA_STATE_INITSTOP;
			sm_dma.state = &sm_dma_state_100; // cleanup
			return 0;
		} else {
			final_dma_state = DMA_STATE_RUNNING; // more words:  continue
			sm_dma.state = &sm_dma_state_10; // reloop next word
		}
	}

	if (final_dma_state == DMA_STATE_RUNNING) {
		// dataptr and wordsleft already incremented
		mailbox.dma.cur_addr += 2; // signal progress to ARM
		return 0;
	} else {
		// remove addr and control from bus
		buslatches_set(2, 0xff, 0);
		buslatches_set(3, 0xff, 0);
		buslatches_set(4, 0x3f, 0);
		// remove BBSY: latch[1], bit 6
		buslatches_set(1, BIT(6), 0);
		mailbox.dma.cur_status = final_dma_state; // signal to ARM
		return 1; // now idle
	}
}

// cleanup after INIT
static uint8_t sm_dma_state_100() {
	// remove addr and control from bus
	buslatches_set(2, 0xff, 0);
	buslatches_set(3, 0xff, 0);
	buslatches_set(4, 0x3f, 0);
	// remove BBSY, SACK and NPR: latch[1], bit 6
	buslatches_set(1, BIT(4)|BIT(5)|BIT(6), 0);

	mailbox.dma.cur_status = DMA_STATE_INITSTOP; // signal to ARM
	sm_dma.state = &sm_dma_state_0; // idle now
	return 1; // now stopped
}
